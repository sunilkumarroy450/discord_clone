// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}




datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//userId is used for unique clerk id
//imageUrl String @db.Text , here  @db.Text  added more string 
//@id(is called as decorator)
//uuid is unique id
model Profile {
  id  String @id @default(uuid())
  userId String @unique 
  name String
  imageUrl String @db.Text
  email String @db.Text

servers Server[]
members Member[]
channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//add Profile relation
model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @db.Text

profileId String
profile Profile @relation(fields:[profileId],references:[id],onDelete:Cascade)

members Member[]
channels Channel[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([profileId])
}


enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole  @default(GUEST)

  profileId String
  profile Profile @relation(fields:[profileId],references:[id],onDelete:Cascade)

  serverId String
  server Server @relation(fields:[serverId],references:[id],onDelete:Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  AUDIO
  VIDEO
  TEXT
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields:[profileId],references:[id],onDelete:Cascade)


  serverId String
  server Server @relation(fields:[serverId],references:[id],onDelete:Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}